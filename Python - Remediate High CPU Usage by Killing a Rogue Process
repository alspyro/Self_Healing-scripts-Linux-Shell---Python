Python

import subprocess
import time
import logging

# Configuration
CPU_THRESHOLD = 95.0
CHECK_INTERVAL_SECONDS = 3

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_top_process():
    """Finds the PID and %CPU of the process using the most CPU."""
    try:
        # ps command to get top process by CPU usage
        # -o pid,pcpu: select PID and %CPU
        # --sort=-pcpu: sort descending by %CPU
        # head -n 2: get the header and the top process line
        command = "ps -eo pid,pcpu --sort=-%cpu | head -n 2"
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
        
        # Skip header and extract PID and CPU
        lines = result.stdout.strip().split('\n')
        if len(lines) < 2:
            return None, 0.0 # No processes found

        pid, cpu_str = lines[1].strip().split()
        return int(pid), float(cpu_str)

    except subprocess.CalledProcessError as e:
        logging.error(f"Error running ps command: {e.stderr.strip()}")
        return None, 0.0
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
        return None, 0.0


def remediate_high_cpu():
    """Monitors CPU and kills the top process if it exceeds the threshold."""
    
    pid, cpu_usage = get_top_process()
    current_pid = int(subprocess.check_output(['/usr/bin/pgrep', '-f', 'remediate_high_cpu']).split()[0])

    if pid and cpu_usage >= CPU_THRESHOLD and pid != current_pid:
        logging.warning(f"High CPU alert: Process PID {pid} is using {cpu_usage:.2f}% CPU.")
        
        # Attempt to terminate the process
        try:
            subprocess.run(['kill', '-9', str(pid)], check=True)
            logging.info(f"Successfully killed rogue process PID {pid}.")
        except subprocess.CalledProcessError as e:
            logging.error(f"Failed to kill process PID {pid}. Error: {e.stderr.strip()}")
    
    elif pid is None or pid == current_pid:
         logging.info("Waiting for a measurable process to appear (or only script running).")

    else:
        logging.info(f"CPU usage is healthy. Top process PID {pid} is at {cpu_usage:.2f}%.")


if __name__ == "__main__":
    logging.info(f"Starting CPU remediation monitor with threshold: {CPU_THRESHOLD}%")
    remediate_high_cpu() # In a real system, this would be a loop with a sleep interval


